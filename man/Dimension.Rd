% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dimension.R
\docType{class}
\name{Dimension}
\alias{Dimension}
\title{Dimension}
\format{
An \code{R6Class} generator object
}
\description{
Dimension Class

Dimension Class
}
\details{
Create a new Dimension
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{field_name}}{character}

\item{\code{func}}{character [optional]}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Dimension-new}{\code{Dimension$new()}}
\item \href{#method-Dimension-toJSON}{\code{Dimension$toJSON()}}
\item \href{#method-Dimension-fromJSON}{\code{Dimension$fromJSON()}}
\item \href{#method-Dimension-toJSONString}{\code{Dimension$toJSONString()}}
\item \href{#method-Dimension-fromJSONString}{\code{Dimension$fromJSONString()}}
\item \href{#method-Dimension-validateJSON}{\code{Dimension$validateJSON()}}
\item \href{#method-Dimension-toString}{\code{Dimension$toString()}}
\item \href{#method-Dimension-isValid}{\code{Dimension$isValid()}}
\item \href{#method-Dimension-getInvalidFields}{\code{Dimension$getInvalidFields()}}
\item \href{#method-Dimension-print}{\code{Dimension$print()}}
\item \href{#method-Dimension-clone}{\code{Dimension$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Dimension-new"></a>}}
\if{latex}{\out{\hypertarget{method-Dimension-new}{}}}
\subsection{Method \code{new()}}{
Initialize a new Dimension class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dimension$new(field_name, func = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{field_name}}{field_name}

\item{\code{func}}{func}

\item{\code{...}}{Other optional arguments.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Dimension-toJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Dimension-toJSON}{}}}
\subsection{Method \code{toJSON()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dimension$toJSON()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Dimension in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Dimension-fromJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Dimension-fromJSON}{}}}
\subsection{Method \code{fromJSON()}}{
Deserialize JSON string into an instance of Dimension
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dimension$fromJSON(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of Dimension
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Dimension-toJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-Dimension-toJSONString}{}}}
\subsection{Method \code{toJSONString()}}{
To JSON String
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dimension$toJSONString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Dimension in JSON format
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Dimension-fromJSONString"></a>}}
\if{latex}{\out{\hypertarget{method-Dimension-fromJSONString}{}}}
\subsection{Method \code{fromJSONString()}}{
Deserialize JSON string into an instance of Dimension
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dimension$fromJSONString(input_json)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_json}}{the JSON input}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the instance of Dimension
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Dimension-validateJSON"></a>}}
\if{latex}{\out{\hypertarget{method-Dimension-validateJSON}{}}}
\subsection{Method \code{validateJSON()}}{
Validate JSON input with respect to Dimension and throw an exception if invalid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dimension$validateJSON(input)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input}}{the JSON input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Dimension-toString"></a>}}
\if{latex}{\out{\hypertarget{method-Dimension-toString}{}}}
\subsection{Method \code{toString()}}{
To string (JSON format)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dimension$toString()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
String representation of Dimension
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Dimension-isValid"></a>}}
\if{latex}{\out{\hypertarget{method-Dimension-isValid}{}}}
\subsection{Method \code{isValid()}}{
Return true if the values in all fields are valid.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dimension$isValid()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
true if the values in all fields are valid.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Dimension-getInvalidFields"></a>}}
\if{latex}{\out{\hypertarget{method-Dimension-getInvalidFields}{}}}
\subsection{Method \code{getInvalidFields()}}{
Return a list of invalid fields (if any).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dimension$getInvalidFields()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of invalid fields (if any).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Dimension-print"></a>}}
\if{latex}{\out{\hypertarget{method-Dimension-print}{}}}
\subsection{Method \code{print()}}{
Print the object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dimension$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Dimension-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Dimension-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Dimension$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
